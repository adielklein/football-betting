const express = require('express');
const Bet = require('../models/Bet');
const Match = require('../models/Match');
const Week = require('../models/Week');
const User = require('../models/User'); // üÜï ◊†◊ï◊°◊£ ◊ú◊ë◊ì◊ô◊ß◊™ ◊™◊§◊ß◊ô◊ì ◊û◊©◊™◊û◊©
const router = express.Router();
const isAdmin = user && user.role === 'admin';

// Get user bets for a week
router.get('/user/:userId/week/:weekId', async (req, res) => {
  try {
    const bets = await Bet.find({ 
      userId: req.params.userId, 
      weekId: req.params.weekId 
    }).populate('matchId');
    
    res.json(bets);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all bets for a week (admin view)
router.get('/week/:weekId', async (req, res) => {
  try {
    const bets = await Bet.find({ weekId: req.params.weekId })
      .populate('userId', 'name email')
      .populate('matchId');
    
    res.json(bets);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create or update bet
router.post('/', async (req, res) => {
  try {
    const { userId, matchId, weekId, team1Goals, team2Goals } = req.body;
    
    // üÜï ◊ë◊ì◊ï◊ß ◊ê◊ù ◊î◊û◊©◊™◊û◊© ◊î◊ï◊ê ◊ê◊ì◊û◊ô◊ü
    const user = await User.findById(userId);
    const isAdmin = user && user.role === 'admin';
    
    console.log(`üîç ◊ë◊ì◊ô◊ß◊™ ◊î◊®◊©◊ê◊ï◊™: ◊û◊©◊™◊û◊© ${user?.name}, ◊™◊§◊ß◊ô◊ì: ${user?.role}, ◊ê◊ì◊û◊ô◊ü: ${isAdmin}`);
    
    // ◊ë◊ì◊ô◊ß◊î ◊û◊ú◊ê◊î - ◊¢◊ù ◊ó◊®◊ô◊í◊î ◊ú◊ê◊ì◊û◊ô◊ü
    const week = await Week.findById(weekId);
    
    if (!week) {
      return res.status(404).json({ message: 'Week not found' });
    }
    
    // üÜï ◊ê◊ì◊û◊ô◊ü ◊û◊ó◊ï◊®◊í ◊û◊õ◊ú ◊ë◊ì◊ô◊ß◊ï◊™ ◊î◊†◊¢◊ô◊ú◊î
    if (!isAdmin) {
      // ◊ë◊ì◊ô◊ß◊î 1: ◊î◊ê◊ù ◊î◊©◊ë◊ï◊¢ ◊°◊ï◊û◊ü ◊õ◊†◊¢◊ï◊ú
      if (week.locked) {
        console.log(`üîí Bet blocked - Week ${week.name} is locked (User is not admin)`);
        return res.status(400).json({ message: 'Betting is locked for this week' });
      }
      
      // ◊ë◊ì◊ô◊ß◊î 2: ◊î◊ê◊ù ◊¢◊ë◊® ◊ñ◊û◊ü ◊î◊†◊¢◊ô◊ú◊î
      if (week.lockTime) {
        const lockTime = new Date(week.lockTime);
        const now = new Date();
        
        if (now >= lockTime) {
          console.log(`‚è∞ Bet blocked - Lock time passed for week ${week.name} (User is not admin)`);
          console.log(`Lock time: ${lockTime.toLocaleString('he-IL')}`);
          console.log(`Current time: ${now.toLocaleString('he-IL')}`);
          
          // ◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô: ◊†◊¢◊ú ◊ê◊™ ◊î◊©◊ë◊ï◊¢ ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™
          await Week.findByIdAndUpdate(weekId, { locked: true });
          
          return res.status(400).json({ 
            message: 'Betting time has expired for this week',
            lockTime: lockTime.toISOString(),
            currentTime: now.toISOString()
          });
        }
      }
      
      // ◊ë◊ì◊ô◊ß◊î 3: ◊î◊ê◊ù ◊î◊©◊ë◊ï◊¢ ◊ë◊õ◊ú◊ú ◊§◊¢◊ô◊ú
      if (!week.active) {
        console.log(`‚ùå Bet blocked - Week ${week.name} is not active (User is not admin)`);
        return res.status(400).json({ message: 'This week is not active' });
      }
    } else {
      // üÜï ◊î◊ï◊ì◊¢◊î ◊ú◊ê◊ì◊û◊ô◊ü
      console.log(`üëë Admin override: ${user.name} can edit bets even if week is locked`);
    }
    
    const prediction = {
      team1Goals: parseInt(team1Goals),
      team2Goals: parseInt(team2Goals)
    };
    
    // ◊ê◊ù ◊î◊í◊¢◊†◊ï ◊¢◊ì ◊õ◊ê◊ü - ◊î◊ì◊ô◊û◊ï◊® ◊û◊ï◊®◊©◊î
    console.log(`‚úÖ Bet allowed for user ${userId} on week ${week.name}${isAdmin ? ' (ADMIN)' : ''}`);
    
    // Update existing bet or create new one
    const bet = await Bet.findOneAndUpdate(
      { userId, matchId },
      { prediction, weekId, updatedAt: new Date() },
      { upsert: true, new: true }
    );
    
    res.json(bet);
  } catch (error) {
    console.error('Error in bet creation:', error);
    res.status(500).json({ message: error.message });
  }
});

// Update bet (◊¢◊ù ◊ó◊®◊ô◊í◊î ◊ú◊ê◊ì◊û◊ô◊ü)
router.patch('/:id', async (req, res) => {
  try {
    const { prediction } = req.body;
    
    // ◊û◊¶◊ê ◊ê◊™ ◊î◊ì◊ô◊û◊ï◊® ◊î◊ß◊ô◊ô◊ù
    const existingBet = await Bet.findById(req.params.id)
      .populate('weekId')
      .populate('userId'); // üÜï ◊†◊ï◊°◊£ ◊ú◊ë◊ì◊ô◊ß◊™ ◊™◊§◊ß◊ô◊ì
    
    if (!existingBet) {
      return res.status(404).json({ message: 'Bet not found' });
    }
    
    const week = existingBet.weekId;
    const user = existingBet.userId;
    const isAdmin = user && user.role === 'admin';
    
    console.log(`üîç ◊¢◊ì◊õ◊ï◊ü ◊î◊ô◊û◊ï◊®: ◊û◊©◊™◊û◊© ${user?.name}, ◊™◊§◊ß◊ô◊ì: ${user?.role}, ◊ê◊ì◊û◊ô◊ü: ${isAdmin}`);
    
    // üÜï ◊ê◊ì◊û◊ô◊ü ◊û◊ó◊ï◊®◊í ◊û◊õ◊ú ◊ë◊ì◊ô◊ß◊ï◊™ ◊î◊†◊¢◊ô◊ú◊î
    if (!isAdmin) {
      // ◊ë◊ì◊ô◊ß◊ï◊™ ◊†◊¢◊ô◊ú◊î ◊ñ◊î◊ï◊™
      if (week.locked) {
        console.log(`üîí Bet update blocked - Week ${week.name} is locked (User is not admin)`);
        return res.status(400).json({ message: 'Betting is locked for this week' });
      }
      
      if (week.lockTime && new Date() >= new Date(week.lockTime)) {
        console.log(`‚è∞ Bet update blocked - Lock time passed for week ${week.name} (User is not admin)`);
        return res.status(400).json({ message: 'Betting time has expired for this week' });
      }
      
      if (!week.active) {
        console.log(`‚ùå Bet update blocked - Week ${week.name} is not active (User is not admin)`);
        return res.status(400).json({ message: 'This week is not active' });
      }
    } else {
      console.log(`üëë Admin override: ${user.name} can update bets even if week is locked`);
    }
    
    const bet = await Bet.findByIdAndUpdate(
      req.params.id,
      { 
        prediction,
        updatedAt: new Date()
      },
      { new: true }
    );
    
    console.log(`‚úÖ Bet update allowed for bet ${req.params.id}${isAdmin ? ' (ADMIN)' : ''}`);
    res.json(bet);
  } catch (error) {
    console.error('Error in bet update:', error);
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;