// public/service-worker.js

console.log('üîß Service Worker loading...');

// ◊í◊®◊°◊î - ◊©◊†◊î ◊ê◊™ ◊ñ◊î ◊õ◊ì◊ô ◊ú◊ê◊ú◊• ◊¢◊ì◊õ◊ï◊ü
const CACHE_VERSION = 'v1.0.0';
const CACHE_NAME = `football-betting-${CACHE_VERSION}`;

// ◊î◊™◊ß◊†◊™ Service Worker
self.addEventListener('install', (event) => {
  console.log('‚úÖ Service Worker installed');
  self.skipWaiting(); // ◊û◊ô◊ì ◊ú◊î◊§◊¢◊ô◊ú ◊ê◊™ ◊î-SW ◊î◊ó◊ì◊©
});

// ◊î◊§◊¢◊ú◊™ Service Worker
self.addEventListener('activate', (event) => {
  console.log('‚úÖ Service Worker activated');
  event.waitUntil(
    // ◊†◊ß◊î cache ◊ô◊©◊†◊ô◊ù
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('üóëÔ∏è Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      // ◊™◊§◊ï◊° ◊©◊ú◊ô◊ò◊î ◊¢◊ú ◊õ◊ú ◊î◊ú◊ß◊ï◊ó◊ï◊™
      return self.clients.claim();
    })
  );
});

// ========================================
// üîî ◊ò◊ô◊§◊ï◊ú ◊ë◊î◊™◊®◊ê◊ï◊™ Push - ◊î◊ó◊ú◊ß ◊î◊ó◊©◊ï◊ë!
// ========================================

self.addEventListener('push', (event) => {
  console.log('üîî [SW] ========================================');
  console.log('üîî [SW] Push event received!');
  console.log('üîî [SW] Event:', event);
  
  let data = {
    title: '◊î◊™◊®◊ê◊î ◊ó◊ì◊©◊î',
    body: '◊ô◊© ◊ú◊ö ◊î◊ï◊ì◊¢◊î ◊ó◊ì◊©◊î',
    icon: '/logo192.png',
    badge: '/logo192.png',
    data: {}
  };

  // ◊†◊°◊î ◊ú◊ß◊®◊ï◊ê ◊ê◊™ ◊î◊†◊™◊ï◊†◊ô◊ù
  if (event.data) {
    try {
      const parsedData = event.data.json();
      console.log('üîî [SW] Parsed data:', parsedData);
      data = { ...data, ...parsedData };
    } catch (error) {
      console.error('üîî [SW] Error parsing push data:', error);
      console.log('üîî [SW] Raw data:', event.data.text());
    }
  } else {
    console.log('üîî [SW] No data in push event');
  }

  console.log('üîî [SW] Notification data:', data);

  // ◊î◊¶◊í ◊î◊™◊®◊ê◊î
  const notificationOptions = {
    body: data.body,
    icon: data.icon || '/logo192.png',
    badge: data.badge || '/logo192.png',
    vibrate: data.vibrate || [200, 100, 200],
    tag: data.tag || 'default',
    data: data.data || {},
    requireInteraction: false, // ◊î◊î◊™◊®◊ê◊î ◊™◊ô◊°◊í◊® ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™
    actions: data.actions || [],
    silent: false // ◊¢◊ù ◊¶◊ú◊ô◊ú
  };

  console.log('üîî [SW] Showing notification:', data.title);
  console.log('üîî [SW] Options:', notificationOptions);

  event.waitUntil(
    self.registration.showNotification(data.title, notificationOptions)
      .then(() => {
        console.log('‚úÖ [SW] Notification shown successfully');
      })
      .catch(error => {
        console.error('‚ùå [SW] Error showing notification:', error);
      })
  );
  
  console.log('üîî [SW] ========================================');
});

// ◊ò◊ô◊§◊ï◊ú ◊ë◊ú◊ó◊ô◊¶◊î ◊¢◊ú ◊î◊™◊®◊ê◊î
self.addEventListener('notificationclick', (event) => {
  console.log('üëÜ [SW] Notification clicked:', event.notification);
  
  event.notification.close();

  // ◊§◊™◊ó ◊ê◊™ ◊î◊ê◊§◊ú◊ô◊ß◊¶◊ô◊î ◊ê◊ï ◊¢◊ë◊ï◊® ◊ú◊¢◊û◊ï◊ì ◊û◊°◊ï◊ô◊ù
  const urlToOpen = event.notification.data?.url || '/';
  
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then(windowClients => {
        // ◊ë◊ì◊ï◊ß ◊ê◊ù ◊ô◊© ◊õ◊ë◊® ◊ó◊ú◊ï◊ü ◊§◊™◊ï◊ó
        for (let client of windowClients) {
          if (client.url.includes(self.registration.scope) && 'focus' in client) {
            console.log('üîÑ [SW] Focusing existing window');
            return client.focus().then(client => {
              if (urlToOpen !== '/') {
                client.navigate(urlToOpen);
              }
              return client;
            });
          }
        }
        
        // ◊§◊™◊ó ◊ó◊ú◊ï◊ü ◊ó◊ì◊©
        if (clients.openWindow) {
          console.log('üÜï [SW] Opening new window:', urlToOpen);
          return clients.openWindow(urlToOpen);
        }
      })
  );
});

// ◊ò◊ô◊§◊ï◊ú ◊ë◊°◊í◊ô◊®◊™ ◊î◊™◊®◊ê◊î
self.addEventListener('notificationclose', (event) => {
  console.log('‚ùå [SW] Notification closed:', event.notification.tag);
});

console.log('‚úÖ Service Worker loaded successfully');